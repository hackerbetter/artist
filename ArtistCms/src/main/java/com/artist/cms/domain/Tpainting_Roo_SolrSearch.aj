// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.artist.cms.domain;

import com.artist.cms.domain.Tpainting;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;

privileged aspect Tpainting_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer Tpainting.solrServer;
    
    public static QueryResponse Tpainting.search(String queryString) {
        String searchString = "Tpainting_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse Tpainting.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void Tpainting.indexTpainting(Tpainting tpainting) {
        List<Tpainting> tpaintings = new ArrayList<Tpainting>();
        tpaintings.add(tpainting);
        indexTpaintings(tpaintings);
    }
    
    @Async
    public static void Tpainting.indexTpaintings(Collection<Tpainting> tpaintings) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (Tpainting tpainting : tpaintings) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "tpainting_" + tpainting.getId());
            sid.addField("tpainting.id_l", tpainting.getId());
            sid.addField("tpainting.title_s", tpainting.getTitle());
            sid.addField("tpainting.author_s", tpainting.getAuthor());
            sid.addField("tpainting.countries_s", tpainting.getCountries());
            sid.addField("tpainting.item_s", tpainting.getItem());
            sid.addField("tpainting.shortimage_s", tpainting.getShortImage());
            sid.addField("tpainting.content_s", tpainting.getContent());
            sid.addField("tpainting.state_s", tpainting.getState());
            sid.addField("tpainting.createtime_dt", tpainting.getCreatetime());
            sid.addField("tpainting.categoryid_l", tpainting.getCategoryId());
            sid.addField("tpainting.sort_dt", tpainting.getSort());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("tpainting_solrsummary_t", new StringBuilder().append(tpainting.getId()).append(" ").append(tpainting.getTitle()).append(" ").append(tpainting.getAuthor()).append(" ").append(tpainting.getCountries()).append(" ").append(tpainting.getItem()).append(" ").append(tpainting.getShortImage()).append(" ").append(tpainting.getContent()).append(" ").append(tpainting.getState()).append(" ").append(tpainting.getCreatetime()).append(" ").append(tpainting.getCategoryId()).append(" ").append(tpainting.getSort()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void Tpainting.deleteIndex(Tpainting tpainting) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("tpainting_" + tpainting.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void Tpainting.postPersistOrUpdate() {
        indexTpainting(this);
    }
    
    @PreRemove
    private void Tpainting.preRemove() {
        deleteIndex(this);
    }
    
    public static final SolrServer Tpainting.solrServer() {
        SolrServer _solrServer = new Tpainting().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
