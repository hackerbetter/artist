// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.artist.cms.domain;

import com.artist.cms.domain.TversionStat;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TversionStat_Roo_Entity {
    
    declare @type: TversionStat: @Entity;
    
    declare @type: TversionStat: @Table(name = "tversionstat");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager TversionStat.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long TversionStat.id;
    
    public Long TversionStat.getId() {
        return this.id;
    }
    
    public void TversionStat.setId(Long id) {
        this.id = id;
    }
    
    @Transactional("transactionManager")
    public void TversionStat.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void TversionStat.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TversionStat attached = TversionStat.findTversionStat(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void TversionStat.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void TversionStat.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public TversionStat TversionStat.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TversionStat merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager TversionStat.entityManager() {
        EntityManager em = new TversionStat().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TversionStat.countTversionStats() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TversionStat o", Long.class).getSingleResult();
    }
    
    public static List<TversionStat> TversionStat.findAllTversionStats() {
        return entityManager().createQuery("SELECT o FROM TversionStat o", TversionStat.class).getResultList();
    }
    
    public static TversionStat TversionStat.findTversionStat(Long id) {
        if (id == null) return null;
        return entityManager().find(TversionStat.class, id);
    }
    
    public static List<TversionStat> TversionStat.findTversionStatEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TversionStat o", TversionStat.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
