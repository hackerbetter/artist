// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.artist.cms.domain;

import com.artist.cms.domain.Tcategory;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Tcategory_Roo_Entity {
    
    declare @type: Tcategory: @Entity;
    
    declare @type: Tcategory: @Table(name = "tcategory");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager Tcategory.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Tcategory.id;
    
    public Long Tcategory.getId() {
        return this.id;
    }
    
    public void Tcategory.setId(Long id) {
        this.id = id;
    }
    
    @Transactional("transactionManager")
    public void Tcategory.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional("transactionManager")
    public void Tcategory.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Tcategory attached = Tcategory.findTcategory(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional("transactionManager")
    public void Tcategory.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional("transactionManager")
    public void Tcategory.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional("transactionManager")
    public Tcategory Tcategory.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Tcategory merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Tcategory.entityManager() {
        EntityManager em = new Tcategory().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Tcategory.countTcategorys() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Tcategory o", Long.class).getSingleResult();
    }
    
    public static List<Tcategory> Tcategory.findAllTcategorys() {
        return entityManager().createQuery("SELECT o FROM Tcategory o", Tcategory.class).getResultList();
    }
    
    public static Tcategory Tcategory.findTcategory(Long id) {
        if (id == null) return null;
        return entityManager().find(Tcategory.class, id);
    }
    
    public static List<Tcategory> Tcategory.findTcategoryEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Tcategory o", Tcategory.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
